---
title: "Multivariate summaries"
format:
  revealjs: 
    theme: [default, spring.scss]
    incremental: true 
    output-file: slides-04-group_by.html
    shift-heading-level-by: -1
execute:
  echo: true
---

```{r}
#| include: false
library(reticulate)
use_python("/usr/local/bin/python3")
```

```{python}
#| include: false
import numpy as np
import pandas as pd
from plotnine import *
```

## The story so far

### Last week

* Reading in data and cleaning/prepping it

* Summarizing **one categorical variable** with a distribution

* Summarizing **two categorical variables** with joint and conditional distributions

* Using `plotnine` and the **grammar of graphics** to make **bar plots** and **column plots**.

### Quantitative variables

* Visualizing by **converting to categorical**

* Visualizing with **histograms** or **densities**

* Estimating **probabilities** from histograms and densities.

* Describing the **skew**

* Calculating and explaining the **mean** and the **median**.

* Calculating and explaining the **standard deviation** and **variance**.

## Comparing quantities across categories

### New dataset: airplane flights

RQ:  Which airline carriers are most likely to be delayed?

Let's look at a data set of all domestic flights that departed from one
of the New York City airports (JFK, LaGuardia, and Newark) on November
16, 2013.

```{python}
data_dir = "https://datasci112.stanford.edu/data/"
df = pd.read_csv(data_dir + "flights_nyc_20131116.csv")
df
```
### Delays

We already know how to **summarize** the flight delays:

*(Check-in: Interpret these numbers!)*

```{python}
df['dep_delay'].median()
df['dep_delay'].mean()
df['dep_delay'].std()
```

### Delays

We already know how to **visualize** the flight delays:

*(Check-in: How would you describe this distribution?)*

```{python}
(ggplot(df, aes(x = 'dep_delay'))
+ geom_histogram()
+ theme_classic())
```

### Delays by origin

RQ: Do the three origin airports (JFK, LGA, EWR) have different delay patterns?

*Check-in:* What could you change in this code to include the `origin` variable?

```{python}
#| eval: false
(ggplot(df, aes(x = 'dep_delay'))
+ geom_histogram()
+ theme_classic())
```

### Delays by origin

Overlapping **histograms** can be really hard to read...

```{python}
#| code-fold: true
(ggplot(df, aes(x = 'dep_delay', fill = 'origin'))
+ geom_histogram()
+ theme_classic())
```

### Delays by origin

... but overlapping **densities** often look nicer...

```{python}
#| code-fold: true
(ggplot(df, aes(x = 'dep_delay', fill = 'origin'))
+ geom_density()
+ theme_classic())
```


### Delays by origin

... especially if we make them a little see-through!

```{python}
#| code-fold: true
(ggplot(df, aes(x = 'dep_delay', fill = 'origin'))
+ geom_density(alpha = 0.5)
+ theme_classic())
```

### Variable transformations

* That last plot was okay, but it was hard to see the details, because the distribution is so **skewed right**.

* Sometimes, for easier visualization, it is worth **transforming** a variable.  

* Often we use a **log** transformation.


### Log transformation{.smaller}

* Example:  Salaries of \$10,000 and \$100,000 and \$10,000,000:

```{python}
#| code-fold: true
dat = pd.DataFrame({"salary": [10000, 100000, 10000000]})
dat["log_salary"] = np.log(dat["salary"])
```


::::{.columns}

:::{.column width="50%"}

```{python}
#| code-fold: true

(ggplot(dat, aes(x = "salary"))
+ geom_histogram(bins = 100)
+ theme_classic())

```


:::

:::{.column width="50%"}

```{python}
#| code-fold: true

(ggplot(dat, aes(x = "log_salary"))
+ geom_histogram(bins = 100)
+ theme_classic())

```
:::

::::

### Log transformations

* Usually, we use the **natural log**, just for convenience.

* Pros:  Skewed data looks **less skewed**, so it is easier to see **patterns**

* Cons: The variable is now on a **different scale** so it is not as **interpretable**

* **Caution!** Log transformations need *positive numbers*.

### Delays by origin - transformed


```{python}
#| code-fold: true

# Shift delays to be above zero
df['delay_shifted'] = df['dep_delay'] - df['dep_delay'].min() + 1

# Log transform
df['log_delay'] = np.log(df['delay_shifted'])

(ggplot(df, aes(x = 'log_delay', fill = 'origin'))
+ geom_density(alpha = 0.5)
+ theme_classic())
```
## Boxplots

### Another option: Boxplots

```{python}
#| code-fold: true

(ggplot(df, aes(y = 'log_delay', x = 'origin'))
+ geom_boxplot()
+ theme_classic())
```

## Facetting

### Facetting

* This plot still was a *little* hard to read.  

* What if we just made **separate plots** for each origin?

* Kind of annoying...


```{python}
is_jfk = (df['origin'] == "JFK")
df_jfk = df[is_jfk]
df_jfk

```

### (Aside: Boolean masking)


```{python}

is_jfk = (df['origin'] == "JFK")
is_jfk

```

### Facetting

Fortunately, `plotnine` (and other plotting packages) has a trick for you!

```{python}
(ggplot(df, aes(x = 'dep_delay'))
+ geom_density()
+ facet_wrap('origin'))
```


## Summaries by groups

### Split-apply-combine{.smaller}

* Our visualizations told us some of the story, but can we use **numeric summaries** as well?

* To do this, we want to calculate the **mean** or **median** delay time for **each** origin airport.

* We call this **split-apply-combine**:  
    + **split** the dataset up by a categorical variable `origin`
    + **apply** a calculation like `mean`
    + **combine** the results back into one dataset
    
* In `pandas`, we use the `groupby()` function to take care of the *split* and *combine* steps!

### Group-by

```{python}
df.groupby("origin")["dep_delay"].mean()
df.groupby("origin")["dep_delay"].median()
```
### Group-by

*Check-in:*  

* Which code is causing "split by origin"?

* Which code is causing "calculate the mean of delays"?

* Which code is causing the re-combining of the data?

```{python}
#| eval: false
df.groupby("origin")["dep_delay"].mean()
```

## Standardized values

### Toy example: exam scores

Hermione's exam scores are is:

* Potions class: 77/100

* Charms class: 95/100

* Herbology class: 90/100

In which class did she do best?


### Toy example: exam scores

**But wait!**

The class **means** are:

* Potions class: 75/100

* Charms class: 85/100

* Herbology class: 85/100

In which class did she do best?

### Toy example: exam scores

**But wait!**

The class **standard deviations** are:

* Potions class: 2 points

* Charms class: 5 points

* Herbology class: 1 point

In which class did she do best?


### Different variabilities by origin

* In addition to having different **centers**, the three origins also have different **spreads**.

```{python}
df.groupby("origin")["dep_delay"].std()
```


* That is, values are **less close** to the mean in general for flights from `LGA` than from `JFK`. 


### Standardized values

Suppose you fly from `LGA` and your flight is 40 minutes late

Your friend flies from `JFK` and their flight is 30 minutes late

Who got "unluckier"?

```{python}
(40 + 0.48)/26
(30 - 1.46)/18.7
```

### Standardized values

* We **standardize** values by subtracting the mean and dividing by the standard deviation.

* This tells us how much better/worse *than typical values* our target value is.

* This is also called the **z-score**. $$z_i = \frac{x_i - \bar{x}}{s_x}$$


### Activity

Research question:  What airlines have the most delays?

* Make a **plot** to answer the question.

* Calculate values to answer the question.

* The first row is a flight from EWR to CLT on US Airways.  The second row is a flight from LGA to IAH on United Airlines.  Which one was a "more extreme" delay?

## Relationships between quantitative variables

### Scatter plots

To **visualize** two quantitative variables, we make a **scatter plot** (or *point* geometry).

RQ: Did *older* passengers pay a *higher* fare on the Titanic?

```{python}
df_titanic = pd.read_csv(data_dir + "titanic.csv")

(ggplot(df_titanic, aes(x = 'age', y = 'fare'))
+ geom_point())
```

### Scatter plots

Notice:

* The **explanatory variable** was on the **x-axis**.

* The **response variable** was on the **y-axis**.

* "If you are older, you pay more" not "If you pay more, you get older".

```{python}
#| eval: false
(ggplot(df_titanic, aes(x = 'age', y = 'fare'))
+ geom_point())
```

### Scatter plots

How could we make this nicer?

1. Do a log-transformation of `fare`, because it is very skewed.

2. Add in a third variable, `pclass`.  How might you do this?


### Scatter plots

Challenge: Can you re-create this plot?

```{python}
#| echo: false
df_titanic['log_fare'] = np.log(df_titanic['fare'])
df_titanic['pclass'] = df_titanic['pclass'].astype('category')

(ggplot(df_titanic, aes(x = 'age', y = 'log_fare', color = 'pclass'))
+ geom_point()
+ theme_classic())
```
### Describing the relationship

Let's look at just third class:

```{python}
#| code-fold: true
is_third= df_titanic['pclass'] == 3
df_third = df_titanic[is_third]

(ggplot(df_third, aes(x = 'age', y = 'fare'))
+ geom_point()
+ theme_classic())
```
### Describing the relationship

This relationship was:

* Not very **strong**: the points don't follow a clear pattern

* Slightly **negative**:  When age was higher, fare was a little lower.

* Not very **linear**: the points don't form a straight line


### Correlation

* What if we want a **numerical summary** of the relationship between variables?

* Do "older than average" people pay "higher than average" fares?

* When the **z-score** of age was high, was the **z-score** of fare high?

### Correlation

```{python}
#| code-fold: true
is_third= df_titanic['pclass'] == 3
df_first = df_titanic[is_third]

mean_age = df_third['age'].mean()
mean_fare = df_third['fare'].mean()

(ggplot(df_third, aes(x = 'age', y = 'fare'))
+ geom_point()
+ geom_vline(xintercept = mean_age, color = "red")
+ geom_hline(yintercept = mean_fare, color = "red")
+ theme_classic())
```

### Correlation

Interpret this result:

```{python}

df_third[['age', 'fare']].corr()

```


### Correlation

Interpret this result:

```{python}

df_third[['age', 'fare']].corr()

```

Age and fare are **slightly negatively correlated**.

*Can you think of an explanation for this?*


### Correlation is not **slope** or **relationship**

![](./images/correlation2.png)


Just for fun:  [Guess the Correlation Game](https://www.guessthecorrelation.com/)

## Takeaways

### Takeaways

* Plot **quantitative variables** across **groups** with **overlapping density** plots, **boxplots**, or by **facetting**.

* Summarize **quantitative variables** across **groups** by using `groupby()` and then calculating summary statisics.

* Know what **split-apply-combine** means.

* Plot **relationships between quantitative variables** with a **scatter plot**

* Describe the **strength**, **direction**, and **shape** of the relationship.

* Summarize **relationships between quantitative variables** with the **correlation**


